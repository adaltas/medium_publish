// Generated by CoffeeScript 2.4.1
var exec, hash, path, visit;

visit = require('unist-util-visit');

({exec} = require('child_process'));

path = require('path');

/*
Upload every image present on the markdown article into a public GIT repository and update the `src` image attribute to reflect the new public URL.
*/
module.exports = function(options = {}) {
  if (!options.target) {
    // Normalization
    throw Error('Required Property: public_images require the "target" option');
  }
  if (!options.repository) {
    throw Error('Required Property: public_images require the "repository" option');
  }
  if (!options.base_url) {
    throw Error('Required Property: public_images require the "base_url" option');
  }
  if (!options.source) {
    throw Error('Required Property: public_images require the "source" option');
  }
  options.source = path.resolve(process.cwd(), options.source);
  if (options.location == null) {
    options.location = function({options, node}) {
      return path.join(hash(options.source), node.url);
    };
  }
  return async function(tree, file) {
    var images, res;
    images = [];
    res = visit(tree, 'image', function(node) {
      var image;
      if (!/\.png$/.test(node.url)) {
        return;
      }
      image = {
        url: node.url,
        alt: node.alt,
        target: options.location({
          options: options,
          node: node
        })
      };
      node.url = `${options.base_url}/${image.target}`;
      return images.push(image);
    });
    await new Promise(function(resolve, reject) {
      return exec(`[ -d ${options.target} ] || mkdir -p ${options.target}\ncd ${options.target}\n[ -d ${options.target}/.git ] || git init\ngit remote get-url origin || git remote add origin ${options.repository}\nif [ ! -f .gitignore ]; then\ncat <<-GITIGNORE >.gitignore\n.*\n!.gitignore\nGITIGNORE\n  git add .gitignore\n  git commit -m "ignore hidden files"\n  git push origin master\nfi\n# Reset if option is activated and if there is more than the first initial commit\nreset=$([ ! -z '${(options.reset ? '1' : '')}' ] && [ \`git rev-list HEAD --count\` -gt '1' ] && echo '1')\nif [ ! -z "$reset" ]; then\n  git reset --hard HEAD~1\nfi\n${images.map(function(image) {
        return [`mkdir -p ${path.dirname(image.target)}`, `cp ${path.dirname(options.source)}/${image.url} ${image.target}`, `git add ${image.target}`].join('\n');
      }).join('\n')}\nif [ ! -z "$(git status --porcelain)" ]; then\n  #git commit $reset -m 'upload new images'\n  git commit -m 'upload new images'\nfi\nforce=$([ ! -z "$reset" ] && echo '-f')\necho "git push $force origin master"\ngit push $force origin master`, function(err, stdout, stderr) {
        if (err) {
          return reject(err);
        } else {
          return resolve();
        }
      });
    });
    return res;
  };
};

hash = function(str) {
  return require('crypto').createHash('md5').update(str, 'utf8').digest('hex');
};
